/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

"use client";

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "@/hooks/useChat";

// Base facial expressions with more comprehensive morph target usage
const facialExpressions = {
  default: {},
  
  // Basic emotions
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,

  },
  
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  
  confused: {
    browDownLeft: 0.1,
    browDownRight: 0.1,
    browInnerUp: 0.7,
    eyeSquintLeft: 0.05,
    eyeSquintRight: 0.05,
    mouthFrownLeft: 0.1,
    mouthFrownRight: 0.1,
    mouthShrugLower: 0.4,
    jawLeft: 0.15,
    eyeLookDownLeft: 0.3,
    eyeLookDownRight: 0.3,
    mouthPressLeft: 0.2,
    mouthPressRight: 0.2,
  },
  
  worried: {
    browDownLeft: 0.5,
    browDownRight: 0.5,
    browInnerUp: 0.4,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.4,
    mouthFrownLeft: 0.5,
    mouthFrownRight: 0.5,
    mouthShrugLower: 0.2,
    eyeLookDownLeft: 0.1,
    eyeLookDownRight: 0.1,
    jawForward: 0.2,
  },
  
  flirty: {
    eyeSquintLeft: 0.8,
    eyeSquintRight: 0.1,
    mouthSmileLeft: 0.6,
    mouthSmileRight: 0.4,
    mouthDimpleLeft: 0.6,
    mouthDimpleRight: 0.3,
    browInnerUp: 0.5,
    mouthPressLeft: 0.3,
    mouthPressRight: 0.1,
    noseSneerLeft: 0.2,
    jawLeft: 0.1,
    eyeLookDownLeft: 0.2,
    eyeLookDownRight: 0.1,
  },
  
  // Wink-enhanced emotions
  mischievous: {
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.1,
    mouthSmileLeft: 0.6,
    mouthSmileRight: 0.4,
    browInnerUp: 0.3,
    noseSneerLeft: 0.2,
  },
  
  embarrassed: {
    browInnerUp: 0.8,
    eyeLookDownLeft: 0.6,
    eyeLookDownRight: 0.6,
    mouthSmileLeft: 0.3,
    mouthSmileRight: 0.3,
    mouthPressLeft: 0.4,
    mouthPressRight: 0.4,
  },
  
  determined: {
    browDownLeft: 0.5,
    browDownRight: 0.5,
    jawForward: 0.6,
    mouthClose: 0.7,
    eyeSquintLeft: 0.3,
    eyeSquintRight: 0.3,
  },
  
  sleepy: {
    eyeSquintLeft: 0.8,
    eyeSquintRight: 0.8,
    browDownLeft: 0.2,
    browDownRight: 0.2,
    mouthSmileLeft: 0.2,
    mouthSmileRight: 0.2,
    jawOpen: 0.1,
  },
  
  disgusted: {
    noseSneerLeft: 0.8,
    noseSneerRight: 0.8,
    mouthFrownLeft: 0.6,
    mouthFrownRight: 0.6,
    browDownLeft: 0.3,
    browDownRight: 0.3,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.4,
  },

  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

// Custom emotion builder function
const createCustomEmotion = (name, morphTargets) => {
  if (typeof name === 'string' && typeof morphTargets === 'object' && morphTargets !== null) {
    facialExpressions[name] = morphTargets;
    return facialExpressions[name];
  }
  console.warn('Invalid emotion data provided to createCustomEmotion');
  return null;
};

// Emotion intensity modifier
const applyIntensity = (emotion, intensity = 1.0) => {
  const modifiedEmotion = {};
  Object.keys(emotion).forEach(key => {
    modifiedEmotion[key] = emotion[key] * Math.max(0, Math.min(1, intensity));
  });
  return modifiedEmotion;
};

// Emotion blending function
const blendEmotions = (emotion1, emotion2, blendFactor = 0.5) => {
  const blended = { ...emotion1 };
  Object.keys(emotion2).forEach(key => {
    if (blended[key] !== undefined) {
      blended[key] = THREE.MathUtils.lerp(blended[key], emotion2[key], blendFactor);
    } else {
      blended[key] = emotion2[key] * blendFactor;
    }
  });
  return blended;
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF(
    "/models/64f1a714fe61576b46f27ca2.glb"
  );
  const { animations } = useGLTF("/models/animations.glb");
  const { message, onMessagePlayed, chat } = useChat();

  // Refs
  const group = useRef();

  // Animation system
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name
  );

  // Facial expression system
  const [facialExpression, setFacialExpression] = useState("");
  const [emotionIntensity, setEmotionIntensity] = useState(1.0);
  const [blendEmotion, setBlendEmotion] = useState(null);
  const [blendFactor, setBlendFactor] = useState(0.5);

  // Eye and wink system
  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [winkIntensity, setWinkIntensity] = useState(1.0);
  const [autoWink, setAutoWink] = useState(true);
  const [winkFrequency, setWinkFrequency] = useState(3000);

  // Animation controls
  const [animationSpeed, setAnimationSpeed] = useState(1.0);
  const [animationIntensity, setAnimationIntensity] = useState(1.0);

  // Audio and lipsync
  const [audio, setAudio] = useState();
  const [lipsync, setLipsync] = useState();

  // Fallback animation mapping for when no animation is specified
  const emotionToAnimation = {
    default: "Idle",
    smile: "Talking_0",
    sad: "Crying",
    angry: "Angry",
    surprised: "Talking_1",
    confused: "Talking_2",
    worried: "Talking_0",
    flirty: "Talking_1",
    mischievous: "Talking_2",
    embarrassed: "Talking_0",
    determined: "Talking_1",
    sleepy: "Idle",
    disgusted: "Talking_2",
    funnyFace: "Laughing",
    crazy: "Laughing",
  };

  useEffect(() => {
    console.log(message);
    if (!message) {
      setAnimation("Idle");
      return;
    }
    
    // Use animation directly from AI response, fallback to emotion mapping if not provided
    const selectedAnimation = message.animation || emotionToAnimation[message.facialExpression] || "Idle";
    setAnimation(selectedAnimation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + message.audioBase64);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message]);

  // Enhanced animation settings with emotion-based intensity
  const animationSettings = {
    "Idle": { loop: true, intensity: 1.0, duration: 4000 },
    "Talking_0": { loop: false, intensity: 1.0, duration: 2000 },
    "Talking_1": { loop: false, intensity: 1.0, duration: 2000 },
    "Talking_2": { loop: false, intensity: 1.0, duration: 2000 },
    "Crying": { loop: true, intensity: 0.8, duration: 3000 },
    "Laughing": { loop: true, intensity: 1.2, duration: 2500 },
    "Rumba": { loop: true, intensity: 1.0, duration: 5000 },
    "Terrified": { loop: true, intensity: 0.9, duration: 2000 },
    "Angry": { loop: true, intensity: 1.1, duration: 3000 },
  };

  // Dynamic animation intensity based on emotion
  const getEmotionBasedIntensity = (emotion) => {
    const intensityMap = {
      flirty: 1.1,
      mischievous: 1.1,
      crazy: 1.4,
      funnyFace: 1.3,
      angry: 1.2,
      terrified: 1.1,
      laughing: 1.3,
      crying: 0.7,
      sleepy: 0.6,
      embarrassed: 0.8,
      worried: 0.9,
      confused: 0.9,
      disgusted: 0.8,
      determined: 1.1,
      surprised: 1.2,
      sad: 0.7,
      smile: 1.0,
      default: 1.0
    };
    return intensityMap[emotion] || 1.0;
  };
  useEffect(() => {
    if (!actions[animation]) return;

    const settings = animationSettings[animation] || { loop: true, intensity: 1.0 };
    const emotionIntensity = getEmotionBasedIntensity(facialExpression);
    const finalIntensity = settings.intensity * emotionIntensity * animationIntensity;
    
    // Stop all other animations first
    Object.keys(actions).forEach(key => {
      if (key !== animation && actions[key].isRunning()) {
        actions[key].fadeOut(0.3);
      }
    });
    
    // Start the new animation
    actions[animation]
      .reset()
      .setEffectiveWeight(1.0)
      .setEffectiveTimeScale(finalIntensity)
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
      
    // Set looping based on animation type
    if (settings.loop) {
      actions[animation].setLoop(THREE.LoopRepeat, Infinity);
    } else {
      actions[animation].setLoop(THREE.LoopOnce, 1);
    }

    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation, facialExpression, animationIntensity, actions, mixer]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    // Cache morph target indices for better performance
    if (!scene.morphTargetCache) {
      scene.morphTargetCache = new Map();
    }
    
    let morphTargetData = scene.morphTargetCache.get(target);
    if (!morphTargetData) {
      morphTargetData = [];
      scene.traverse((child) => {
        if (child.isSkinnedMesh && child.morphTargetDictionary) {
          const index = child.morphTargetDictionary[target];
          if (index !== undefined && child.morphTargetInfluences[index] !== undefined) {
            morphTargetData.push({ child, index });
          }
        }
      });
      scene.morphTargetCache.set(target, morphTargetData);
    }

    // Apply morph target changes
    morphTargetData.forEach(({ child, index }) => {
      child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
        child.morphTargetInfluences[index],
        value,
        speed
      );
    });

    // Update Leva controls if not in setup mode
    if (!setupMode) {
      try {
        set({ [target]: value });
      } catch (e) {
        // Silently ignore Leva update errors
      }
    }
  };

  useFrame(() => {
    if (setupMode) return;

    // Define mouth-related morph targets that should be controlled by lipsync
    const mouthMorphTargets = new Set(Object.values(corresponding));
    
    // Check if lipsync is active
    const isLipsyncActive = message && lipsync && audio && !audio.paused;
    const appliedMorphTargets = new Set();
    
    // Handle lipsync first (highest priority)
    if (isLipsyncActive) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
          const morphTarget = corresponding[mouthCue.value];
          if (morphTarget) {
            appliedMorphTargets.add(morphTarget);
            lerpMorphTarget(morphTarget, 1, 0.2);
            break;
          }
        }
      }
    }

    // Reset unused mouth morph targets
    Object.values(corresponding).forEach((value) => {
      if (!appliedMorphTargets.has(value)) {
        lerpMorphTarget(value, 0, 0.1);
      }
    });

    // Apply facial expressions (excluding mouth morph targets during lipsync)
    Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
      // Skip eye blink/wink - handled separately
      if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
        return;
      }
      
      // Skip mouth morph targets during active lipsync
      if (isLipsyncActive && mouthMorphTargets.has(key)) {
        return;
      }
      
      let finalValue = 0;
      const baseMapping = facialExpressions[facialExpression];
      
      if (baseMapping && baseMapping[key]) {
        // Apply intensity to base emotion
        let emotionValue = baseMapping[key] * emotionIntensity;
        
        // Apply emotion blending if active
        if (blendEmotion && facialExpressions[blendEmotion] && facialExpressions[blendEmotion][key]) {
          const blendValue = facialExpressions[blendEmotion][key] * emotionIntensity;
          emotionValue = THREE.MathUtils.lerp(emotionValue, blendValue, blendFactor);
        }
        
        finalValue = emotionValue;
      } else if (blendEmotion && facialExpressions[blendEmotion] && facialExpressions[blendEmotion][key]) {
        // Only blend emotion if base emotion doesn't have this morph target
        finalValue = facialExpressions[blendEmotion][key] * emotionIntensity * blendFactor;
      }
      
      lerpMorphTarget(key, finalValue, 0.1);
    });

    // Enhanced wink system with intensity control
    const leftWinkValue = (blink || winkLeft) ? 1 * winkIntensity : 0;
    const rightWinkValue = (blink || winkRight) ? 1 * winkIntensity : 0;
    
    lerpMorphTarget("eyeBlinkLeft", leftWinkValue, 0.5);
    lerpMorphTarget("eyeBlinkRight", rightWinkValue, 0.5);
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    winkBoth: button(() => {
      setWinkLeft(true);
      setWinkRight(true);
      setTimeout(() => {
        setWinkLeft(false);
        setWinkRight(false);
      }, 300);
    }),
    winkIntensity: {
      value: winkIntensity,
      min: 0.1,
      max: 2.0,
      step: 0.1,
      onChange: (value) => setWinkIntensity(value),
    },
    autoWink: {
      value: autoWink,
      onChange: (value) => setAutoWink(value),
    },
    winkFrequency: {
      value: winkFrequency,
      min: 1000,
      max: 10000,
      step: 500,
      onChange: (value) => setWinkFrequency(value),
    },
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    animationSpeed: {
      value: animationSpeed,
      min: 0.1,
      max: 3.0,
      step: 0.1,
      onChange: (value) => {
        setAnimationSpeed(value);
        if (actions[animation]) {
          actions[animation].setEffectiveTimeScale(value);
        }
      },
    },
    animationIntensity: {
      value: animationIntensity,
      min: 0.1,
      max: 2.0,
      step: 0.1,
      onChange: (value) => {
        setAnimationIntensity(value);
        if (actions[animation]) {
          actions[animation].setEffectiveWeight(value);
        }
      },
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    emotionIntensity: {
      value: emotionIntensity,
      min: 0,
      max: 2,
      step: 0.1,
      onChange: (value) => setEmotionIntensity(value),
    },
    blendEmotion: {
      options: [null, ...Object.keys(facialExpressions)],
      onChange: (value) => setBlendEmotion(value),
    },
    blendFactor: {
      value: blendFactor,
      min: 0,
      max: 1,
      step: 0.1,
      onChange: (value) => setBlendFactor(value),
    },
    createCustomEmotion: button(() => {
      const name = prompt("Enter emotion name:");
      if (!name || name.trim() === '') {
        console.warn("Emotion name cannot be empty");
        return;
      }
      
      const emotion = prompt("Enter morph target values as JSON (e.g., {\"mouthSmileLeft\": 0.8, \"eyeSquintLeft\": 0.5}):");
      if (!emotion || emotion.trim() === '') {
        console.warn("Emotion data cannot be empty");
        return;
      }
      
      try {
        const parsed = JSON.parse(emotion);
        const result = createCustomEmotion(name.trim(), parsed);
        if (result) {
          console.log(`Created custom emotion: ${name}`, parsed);
          // Force re-render of controls
          window.dispatchEvent(new Event('resize'));
        }
      } catch (e) {
        console.error("Invalid JSON format:", e.message);
      }
    }),
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
            nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  // Auto-blink system
  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  // Auto-wink system with contextual behavior
  useEffect(() => {
    if (!autoWink) return;
    
    let winkTimeout;
    const nextWink = () => {
      // Get wink behavior for current emotion
      const winkBehavior = getWinkBehavior(facialExpression);
      
      winkTimeout = setTimeout(() => {
        if (winkBehavior.type === 'none') {
          nextWink();
          return;
        }
        
        if (winkBehavior.type === 'left') {
          setWinkLeft(true);
          setTimeout(() => setWinkLeft(false), winkBehavior.duration);
        } else if (winkBehavior.type === 'right') {
          setWinkRight(true);
          setTimeout(() => setWinkRight(false), winkBehavior.duration);
        } else if (winkBehavior.type === 'both') {
          setWinkLeft(true);
          setWinkRight(true);
          setTimeout(() => {
            setWinkLeft(false);
            setWinkRight(false);
          }, winkBehavior.duration);
        }
        
        nextWink();
      }, winkBehavior.frequency + THREE.MathUtils.randInt(-1000, 1000));
    };
    nextWink();
    return () => clearTimeout(winkTimeout);
  }, [autoWink, winkFrequency, facialExpression]);

  // Contextual wink behavior function
  const getWinkBehavior = (emotion) => {
    const behaviors = {
      flirty: { type: 'left', duration: 400, frequency: 2000 },
      mischievous: { type: 'left', duration: 300, frequency: 3000 },
      smile: { type: 'right', duration: 300, frequency: 4000 },
      funnyFace: { type: 'both', duration: 200, frequency: 2000 },
      crazy: { type: 'both', duration: 150, frequency: 1000 },
      // All other emotions have no winking
      default: { type: 'none', duration: 0, frequency: 0 }
    };
    
    return behaviors[emotion] || behaviors.default;
  };

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/64f1a714fe61576b46f27ca2.glb");
useGLTF.preload("/models/animations.glb");
